
VertexLitGeneric
{

	$basetexture models/jessev92/characters/hl2/male/citizen/citizen_sheet2_d
	$bumpmap models/jessev92/characters/hl2/male/citizen/citizen_sheet2_b
	$lightwarptexture dev/identitylightwarp

	$halflambert 1
	$ambientocclusion 1
	$nocull 1

	$detail models/jessev92/characters/hl2/male/citizen/citizen_sheet2_dt
	$detailscale 1
	$detailblendmode 0
	$detailblendfactor 0.15

	$color2 "{ 59 89 104 }" // Nice civies blue.

	$phong 1
	$phongexponent 4
	$phongboost 0.3
	$phongfresnelranges "[ 0.1 0.2 0.5 ]"
	$phongexponenttexture models/jessev92/characters/hl2/male/citizen/citizen_sheet2_x

	$rimlight 1
	$rimlightexponent 8
	$rimlightboost 2
	$rimmask 1

	$blendtintbybasealpha 1 // alpha channel of $basetexture: color mask.
	$blendtintcoloroverbase 0 // blend mode. anything =/= 0 is ugly!

	$PhongBrightnessScalar 0.5 // see below. "0.5" will get overwritten.

	Proxies
	{
		// If you're basing your playermodels off of these, you may want to enable PlayerColor.
		// Just uncomment this part below, and comment out the $color2 near the top of the qc.

		//PlayerColor
		//{
		//	resultVar	$color2 // pass the player color value to Gmod
		//	default		0.23 0.35 0.41 // unused for now.
		//}
		Clamp // clamp the chosen color between 1% and 125% (usually)
		{
			min 0.01
			max 1.25
			srcVar1 "$color2"
			resultVar "$color2"
		}
		Clamp // copy this value to phong tint, clamp it to 50% min.
		{
			min 0.5
			max 1.0
			srcVar1 "$color2"
			resultVar "$phongtint"
		}
		Equals // copy $color2 value to exterior variable. this makes it
		{      // no longer a RGB array but a single float instead (!??)
			srcVar1 "$color2"
			resultVar "$PhongBrightnessScalar"
		}
		Multiply // multiply $phongtint by this new float value.
		{
			srcVar1 "$phongtint"
			srcVar2 "$phongBrightnessScalar"
			resultVar "$phongtint"
		}
		Clamp // the result of this multiply doesn't go any lower than 20%
		{
			min 0.25
			max 1.00
			srcVar1 "$phongtint"
			resultVar "$phongtint"
		}
	}
}